{"ast":null,"code":"import axios from 'axios';\nimport { devURLTnega } from '../../utilities/config';\nimport { POST_LOGIN, POST_LOGIN_ERROR, GET_USER, GET_ALL_MASTER_DATA, UPDATE_STATUS, POST_FORGET, POST_FORGET_ERROR, GET_BATCH_VERIFICATION } from './types';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nconst MySwal = withReactContent(Swal);\n_c = MySwal;\nexport const loginApi = data => dispatch => {\n  const API_URL = `${devURLTnega}api/users/login`;\n  const body = {\n    \"user\": {\n      \"email\": data.email,\n      \"password\": data.password,\n      // \"username\": data.name,\n      \"role\": data.role,\n      \"zone\": data.Zone,\n      \"district\": data.District\n    }\n  };\n  axios.post(API_URL, body).then(res => {\n    console.log(\"user data\", res.data.user);\n    dispatch({\n      type: POST_LOGIN,\n      payload: res.data\n    });\n    dispatch({\n      type: GET_USER,\n      payload: res.data.user\n    });\n  }).catch(err => {\n    console.log(\"login--- \", err.response);\n    dispatch({\n      type: POST_LOGIN_ERROR,\n      payload: err.response.data\n    });\n    Swal.fire(err.response.data.message); // if(err.response.data.message==\"Login Failed\"){\n    //     Swal.fire(\"Login\",\"Failed\",\"error\");\n    // }\n  });\n};\nexport const forgotApi = data => dispatch => {\n  const API_URL = `${devURLTnega}api/forgotpassword`;\n  const body = {\n    \"email\": data.email\n  };\n  axios.post(API_URL, body).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: POST_FORGET,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(\"Forgot --- \", err.response);\n    dispatch({\n      type: POST_FORGET_ERROR,\n      payload: err.response.data\n    }); // if(err.response.data.message==\"Login Failed\"){\n    //     Swal.fire(\"Login\",\"Failed\",\"error\");\n    // }\n  });\n}; //igr-batch-verification\n\nexport const getBatchVerification = () => dispatch => {\n  const API_URL = `${devURLTnega}api/dashboard/batchschema `;\n  axios.get(API_URL, {\n    headers: {\n      Authorization: 'Bearer ' + localStorage.getItem('auth_token')\n    }\n  }).then(res => res.data).then(response => {\n    console.log('200 - ', response);\n\n    if (response.status == 200) {\n      dispatch({\n        type: GET_BATCH_VERIFICATION,\n        payload: response\n      });\n    }\n  }).catch(err => {\n    console.log(err.response);\n  });\n}; //ResetoPassword\n\nexport const resetPassword = data => dispatch => {\n  const API_URL = `${devURLTnega}api/resetpassword`;\n  const body = {\n    \"user\": {\n      \"email\": data.email,\n      \"password\": data.password,\n      \"confirm_password\": data.confirm_password,\n      // \"username\": data.name,\n      \"role\": data.role,\n      \"zone\": data.Zone,\n      \"district\": data.District\n    }\n  };\n  axios.post(API_URL, body).then(res => {\n    console.log(\"user data\", res.data.user);\n    dispatch({\n      type: POST_LOGIN,\n      payload: res.data\n    });\n    dispatch({\n      type: GET_USER,\n      payload: res.data.user\n    });\n  }).catch(err => {\n    console.log(\"login--- \", err.response);\n    dispatch({\n      type: POST_LOGIN_ERROR,\n      payload: err.response.data\n    }); // if(err.response.data.message==\"Login Failed\"){\n    //     Swal.fire(\"Login\",\"Failed\",\"error\");\n    // }\n  });\n}; // export const createUserRole  = data =>dispatch =>{\n//     // const API_URL=`${devURLTnega}api/users/role/?department_id=1`;\n//     axios.post(API_URL,body,{\n//         headers:{\n//             Authorization:'Bearer '+ authtoken\n//         }\n//     })\n//     .then((response)=>{\n//             console.log('user - role -- ',response);\n//         // if(response.status===200){\n//             dispatch({type:POST_USER_ROLES,payload:response.data});\n//             MySwal.fire(\"User Role Creation\",\"Completed\",\"success\");\n//         // }\n//     })\n//     .catch(err=>{\n//         MySwal.fire(\"User Role Creation\",err.response.data.error,\"error\");\n//         console.log(\"Error-> \",err.response);\n//     })\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"MySwal\");","map":{"version":3,"sources":["/home/user/Desktop/IGR/tnega-pratik/src/store/Login/action.js"],"names":["axios","devURLTnega","POST_LOGIN","POST_LOGIN_ERROR","GET_USER","GET_ALL_MASTER_DATA","UPDATE_STATUS","POST_FORGET","POST_FORGET_ERROR","GET_BATCH_VERIFICATION","Swal","withReactContent","MySwal","loginApi","data","dispatch","API_URL","body","email","password","role","Zone","District","post","then","res","console","log","user","type","payload","catch","err","response","fire","message","forgotApi","getBatchVerification","get","headers","Authorization","localStorage","getItem","status","resetPassword","confirm_password"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { devURLTnega } from '../../utilities/config';\nimport {POST_LOGIN, POST_LOGIN_ERROR , GET_USER, GET_ALL_MASTER_DATA, UPDATE_STATUS, POST_FORGET , POST_FORGET_ERROR, GET_BATCH_VERIFICATION} from './types';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nconst MySwal = withReactContent(Swal);\n\n\n\n\nexport const loginApi = data => dispatch =>{\n\n    const API_URL = `${devURLTnega}api/users/login`;\n\n    const body={\n        \"user\": {\n            \"email\": data.email,\n            \"password\": data.password,\n            // \"username\": data.name,\n            \n            \"role\": data.role,\n            \"zone\": data.Zone,\n            \"district\": data.District\n            \n        }\n    };\n\n    axios.post(API_URL,body)\n    .then((res)=>{\n        console.log(\"user data\", res.data.user);\n        dispatch({type:POST_LOGIN, payload:res.data})\n        dispatch({type:GET_USER , payload:res.data.user})\n    })\n    .catch(err=>{\n        console.log(\"login--- \",err.response);\n        dispatch({type:POST_LOGIN_ERROR, payload:err.response.data})\n        Swal.fire(err.response.data.message);\n        // if(err.response.data.message==\"Login Failed\"){\n        //     Swal.fire(\"Login\",\"Failed\",\"error\");\n        // }\n    })\n}\n\nexport const forgotApi = data => dispatch =>{\n\n    const API_URL = `${devURLTnega}api/forgotpassword`;\n\n    const body={\n    \n            \"email\": data.email\n           \n        \n    };\n\n    axios.post(API_URL,body)\n    .then((res)=>{\n        console.log(res.data);\n\n        dispatch({type:POST_FORGET, payload:res.data})\n        \n    })\n    .catch(err=>{\n        console.log(\"Forgot --- \",err.response);\n        dispatch({type:POST_FORGET_ERROR, payload:err.response.data})\n        // if(err.response.data.message==\"Login Failed\"){\n        //     Swal.fire(\"Login\",\"Failed\",\"error\");\n        // }\n    })\n}\n\n\n\n//igr-batch-verification\n\nexport const getBatchVerification =()=>(dispatch)=>{\n    const API_URL=`${devURLTnega}api/dashboard/batchschema `;\n    axios.get(API_URL,{\n        headers:{\n            Authorization:'Bearer '+ localStorage.getItem('auth_token')\n        }\n    }).then((res)=>res.data)\n    .then((response)=>{\n        console.log('200 - ',response)\n        if(response.status==200){\n            dispatch({type:GET_BATCH_VERIFICATION, payload:response})\n    }\n    })\n    .catch(err=>{\n        console.log(err.response);\n    })\n}\n\n\n//ResetoPassword\n\nexport const resetPassword = data => dispatch =>{\n\n    const API_URL = `${devURLTnega}api/resetpassword`;\n\n    const body={\n        \"user\": {\n            \"email\": data.email,\n            \"password\": data.password,\n            \"confirm_password\": data.confirm_password,\n            // \"username\": data.name,\n            \n            \"role\": data.role,\n            \"zone\": data.Zone,\n            \"district\": data.District\n            \n        }\n    };\n\n    axios.post(API_URL,body)\n    .then((res)=>{\n        console.log(\"user data\", res.data.user);\n        dispatch({type:POST_LOGIN, payload:res.data})\n        dispatch({type:GET_USER , payload:res.data.user})\n    })\n    .catch(err=>{\n        console.log(\"login--- \",err.response);\n        dispatch({type:POST_LOGIN_ERROR, payload:err.response.data})\n        // if(err.response.data.message==\"Login Failed\"){\n        //     Swal.fire(\"Login\",\"Failed\",\"error\");\n        // }\n    })\n}\n\n\n\n\n// export const createUserRole  = data =>dispatch =>{\n//     // const API_URL=`${devURLTnega}api/users/role/?department_id=1`;\n\n\n//     axios.post(API_URL,body,{\n//         headers:{\n//             Authorization:'Bearer '+ authtoken\n//         }\n//     })\n//     .then((response)=>{\n//             console.log('user - role -- ',response);\n//         // if(response.status===200){\n//             dispatch({type:POST_USER_ROLES,payload:response.data});\n//             MySwal.fire(\"User Role Creation\",\"Completed\",\"success\");\n//         // }\n//     })\n//     .catch(err=>{\n//         MySwal.fire(\"User Role Creation\",err.response.data.error,\"error\");\n//         console.log(\"Error-> \",err.response);\n//     })\n// }\n\n"]},"metadata":{},"sourceType":"module"}