{"ast":null,"code":"const {\n  readdirSync\n} = require('fs');\n\nconst {\n  execSync\n} = require('child_process');\n\nconst opts = {\n  stdio: 'ignore'\n};\n\nconst exec = cmd => execSync(cmd, opts);\n\nconst isUnixInstalled = program => {\n  try {\n    exec(`hash ${program} 2>/dev/null`);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst isDirectory = path => {\n  try {\n    readdirSync(path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst isDotDesktopInstalled = program => {\n  const dirs = [process.env.XDG_DATA_HOME && process.env.XDG_DATA_HOME + '/applications', process.env.HOME && process.env.HOME + '/.local/share/applications', '/usr/share/applications', '/usr/local/share/applications'].filter(Boolean).filter(isDirectory);\n\n  const trimExtension = x => x.replace(/\\.desktop$/, '');\n\n  const desktopFiles = dirs.flatMap(x => readdirSync(x)).filter(x => x.endsWith('.desktop')).map(trimExtension);\n  const programTrimmed = trimExtension(program);\n  return desktopFiles.includes(programTrimmed);\n};\n\nconst isMacInstalled = program => {\n  try {\n    exec(`osascript -e 'id of application \"${program}\"' 2>&1>/dev/null`);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst isWindowsInstalled = program => {\n  // Try a couple variants, depending on execution environment the .exe\n  // may or may not be required on both `where` and the program name.\n  const attempts = [`where ${program}`, `where ${program}.exe`, `where.exe ${program}`, `where.exe ${program}.exe`];\n  let success = false;\n\n  for (const a of attempts) {\n    try {\n      exec(a);\n      success = true;\n    } catch {}\n  }\n\n  return success;\n};\n\nconst sanitize = program => {\n  // from https://github.com/parshap/node-sanitize-filename/ licensed WTFPL/ISC\n\n  /* eslint-disable no-useless-escape,no-control-regex */\n  const illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\n  const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\n  const reservedRe = /^\\.+$/;\n  const probablyTwoThingsRe = /\\&\\&/g;\n  /* eslint-enable no-useless-escape,no-control-regex */\n\n  return program.replace(illegalRe, '').replace(controlRe, '').replace(reservedRe, '').replace(probablyTwoThingsRe, '');\n};\n\nmodule.exports = program => [isUnixInstalled, isMacInstalled, isWindowsInstalled, isDotDesktopInstalled].some(f => f(sanitize(program)));","map":{"version":3,"sources":["/home/user/Desktop/IGR/tnega-pratik/node_modules/is-program-installed/index.js"],"names":["readdirSync","require","execSync","opts","stdio","exec","cmd","isUnixInstalled","program","isDirectory","path","isDotDesktopInstalled","dirs","process","env","XDG_DATA_HOME","HOME","filter","Boolean","trimExtension","x","replace","desktopFiles","flatMap","endsWith","map","programTrimmed","includes","isMacInstalled","isWindowsInstalled","attempts","success","a","sanitize","illegalRe","controlRe","reservedRe","probablyTwoThingsRe","module","exports","some","f"],"mappings":"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","sourcesContent":["const { readdirSync } = require('fs')\nconst { execSync } = require('child_process')\n\nconst opts = {\n  stdio: 'ignore'\n}\nconst exec = (cmd) => execSync(cmd, opts)\n\nconst isUnixInstalled = (program) => {\n  try {\n    exec(`hash ${program} 2>/dev/null`)\n    return true\n  } catch {\n    return false\n  }\n}\n\nconst isDirectory = (path) => {\n  try {\n    readdirSync(path)\n    return true\n  } catch {\n    return false\n  }\n}\nconst isDotDesktopInstalled = (program) => {\n  const dirs = [\n    process.env.XDG_DATA_HOME && process.env.XDG_DATA_HOME + '/applications',\n    process.env.HOME && process.env.HOME + '/.local/share/applications',\n    '/usr/share/applications',\n    '/usr/local/share/applications'\n  ]\n    .filter(Boolean)\n    .filter(isDirectory)\n\n  const trimExtension = (x) => x.replace(/\\.desktop$/, '')\n  const desktopFiles = dirs\n    .flatMap((x) => readdirSync(x))\n    .filter((x) => x.endsWith('.desktop'))\n    .map(trimExtension)\n\n  const programTrimmed = trimExtension(program)\n  return desktopFiles.includes(programTrimmed)\n}\n\nconst isMacInstalled = (program) => {\n  try {\n    exec(`osascript -e 'id of application \"${program}\"' 2>&1>/dev/null`)\n    return true\n  } catch {\n    return false\n  }\n}\n\nconst isWindowsInstalled = (program) => {\n  // Try a couple variants, depending on execution environment the .exe\n  // may or may not be required on both `where` and the program name.\n  const attempts = [\n    `where ${program}`,\n    `where ${program}.exe`,\n    `where.exe ${program}`,\n    `where.exe ${program}.exe`\n  ]\n\n  let success = false\n  for (const a of attempts) {\n    try {\n      exec(a)\n      success = true\n    } catch {}\n  }\n\n  return success\n}\n\nconst sanitize = (program) => {\n  // from https://github.com/parshap/node-sanitize-filename/ licensed WTFPL/ISC\n  /* eslint-disable no-useless-escape,no-control-regex */\n  const illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g\n  const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g\n  const reservedRe = /^\\.+$/\n  const probablyTwoThingsRe = /\\&\\&/g\n  /* eslint-enable no-useless-escape,no-control-regex */\n  return program\n    .replace(illegalRe, '')\n    .replace(controlRe, '')\n    .replace(reservedRe, '')\n    .replace(probablyTwoThingsRe, '')\n}\n\nmodule.exports = (program) => [\n  isUnixInstalled,\n  isMacInstalled,\n  isWindowsInstalled,\n  isDotDesktopInstalled\n].some((f) => f(sanitize(program)))\n"]},"metadata":{},"sourceType":"script"}