{"ast":null,"code":"var _require = require('fs'),\n    readdirSync = _require.readdirSync;\n\nvar _require2 = require('child_process'),\n    execSync = _require2.execSync;\n\nvar opts = {\n  stdio: 'ignore'\n};\n\nvar exec = function exec(cmd) {\n  return execSync(cmd, opts);\n};\n\nvar isUnixInstalled = function isUnixInstalled(program) {\n  try {\n    exec(\"hash \".concat(program, \" 2>/dev/null\"));\n    return true;\n  } catch (_unused) {\n    return false;\n  }\n};\n\nvar isDirectory = function isDirectory(path) {\n  try {\n    readdirSync(path);\n    return true;\n  } catch (_unused2) {\n    return false;\n  }\n};\n\nvar isDotDesktopInstalled = function isDotDesktopInstalled(program) {\n  var dirs = [process.env.XDG_DATA_HOME && process.env.XDG_DATA_HOME + '/applications', process.env.HOME && process.env.HOME + '/.local/share/applications', '/usr/share/applications', '/usr/local/share/applications'].filter(Boolean).filter(isDirectory);\n\n  var trimExtension = function trimExtension(x) {\n    return x.replace(/\\.desktop$/, '');\n  };\n\n  var desktopFiles = dirs.flatMap(function (x) {\n    return readdirSync(x);\n  }).filter(function (x) {\n    return x.endsWith('.desktop');\n  }).map(trimExtension);\n  var programTrimmed = trimExtension(program);\n  return desktopFiles.includes(programTrimmed);\n};\n\nvar isMacInstalled = function isMacInstalled(program) {\n  try {\n    exec(\"osascript -e 'id of application \\\"\".concat(program, \"\\\"' 2>&1>/dev/null\"));\n    return true;\n  } catch (_unused3) {\n    return false;\n  }\n};\n\nvar isWindowsInstalled = function isWindowsInstalled(program) {\n  // Try a couple variants, depending on execution environment the .exe\n  // may or may not be required on both `where` and the program name.\n  var attempts = [\"where \".concat(program), \"where \".concat(program, \".exe\"), \"where.exe \".concat(program), \"where.exe \".concat(program, \".exe\")];\n  var success = false;\n\n  for (var _i = 0, _attempts = attempts; _i < _attempts.length; _i++) {\n    var a = _attempts[_i];\n\n    try {\n      exec(a);\n      success = true;\n    } catch (_unused4) {}\n  }\n\n  return success;\n};\n\nvar sanitize = function sanitize(program) {\n  // from https://github.com/parshap/node-sanitize-filename/ licensed WTFPL/ISC\n\n  /* eslint-disable no-useless-escape,no-control-regex */\n  var illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\n  var controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\n  var reservedRe = /^\\.+$/;\n  var probablyTwoThingsRe = /\\&\\&/g;\n  /* eslint-enable no-useless-escape,no-control-regex */\n\n  return program.replace(illegalRe, '').replace(controlRe, '').replace(reservedRe, '').replace(probablyTwoThingsRe, '');\n};\n\nmodule.exports = function (program) {\n  return [isUnixInstalled, isMacInstalled, isWindowsInstalled, isDotDesktopInstalled].some(function (f) {\n    return f(sanitize(program));\n  });\n};","map":{"version":3,"sources":["/home/user/Desktop/IGR/tnega-pratik/node_modules/is-program-installed/index.js"],"names":["require","readdirSync","execSync","opts","stdio","exec","cmd","isUnixInstalled","program","isDirectory","path","isDotDesktopInstalled","dirs","process","env","XDG_DATA_HOME","HOME","filter","Boolean","trimExtension","x","replace","desktopFiles","flatMap","endsWith","map","programTrimmed","includes","isMacInstalled","isWindowsInstalled","attempts","success","a","sanitize","illegalRe","controlRe","reservedRe","probablyTwoThingsRe","module","exports","some","f"],"mappings":"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","sourcesContent":["const { readdirSync } = require('fs')\nconst { execSync } = require('child_process')\n\nconst opts = {\n  stdio: 'ignore'\n}\nconst exec = (cmd) => execSync(cmd, opts)\n\nconst isUnixInstalled = (program) => {\n  try {\n    exec(`hash ${program} 2>/dev/null`)\n    return true\n  } catch {\n    return false\n  }\n}\n\nconst isDirectory = (path) => {\n  try {\n    readdirSync(path)\n    return true\n  } catch {\n    return false\n  }\n}\nconst isDotDesktopInstalled = (program) => {\n  const dirs = [\n    process.env.XDG_DATA_HOME && process.env.XDG_DATA_HOME + '/applications',\n    process.env.HOME && process.env.HOME + '/.local/share/applications',\n    '/usr/share/applications',\n    '/usr/local/share/applications'\n  ]\n    .filter(Boolean)\n    .filter(isDirectory)\n\n  const trimExtension = (x) => x.replace(/\\.desktop$/, '')\n  const desktopFiles = dirs\n    .flatMap((x) => readdirSync(x))\n    .filter((x) => x.endsWith('.desktop'))\n    .map(trimExtension)\n\n  const programTrimmed = trimExtension(program)\n  return desktopFiles.includes(programTrimmed)\n}\n\nconst isMacInstalled = (program) => {\n  try {\n    exec(`osascript -e 'id of application \"${program}\"' 2>&1>/dev/null`)\n    return true\n  } catch {\n    return false\n  }\n}\n\nconst isWindowsInstalled = (program) => {\n  // Try a couple variants, depending on execution environment the .exe\n  // may or may not be required on both `where` and the program name.\n  const attempts = [\n    `where ${program}`,\n    `where ${program}.exe`,\n    `where.exe ${program}`,\n    `where.exe ${program}.exe`\n  ]\n\n  let success = false\n  for (const a of attempts) {\n    try {\n      exec(a)\n      success = true\n    } catch {}\n  }\n\n  return success\n}\n\nconst sanitize = (program) => {\n  // from https://github.com/parshap/node-sanitize-filename/ licensed WTFPL/ISC\n  /* eslint-disable no-useless-escape,no-control-regex */\n  const illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g\n  const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g\n  const reservedRe = /^\\.+$/\n  const probablyTwoThingsRe = /\\&\\&/g\n  /* eslint-enable no-useless-escape,no-control-regex */\n  return program\n    .replace(illegalRe, '')\n    .replace(controlRe, '')\n    .replace(reservedRe, '')\n    .replace(probablyTwoThingsRe, '')\n}\n\nmodule.exports = (program) => [\n  isUnixInstalled,\n  isMacInstalled,\n  isWindowsInstalled,\n  isDotDesktopInstalled\n].some((f) => f(sanitize(program)))\n"]},"metadata":{},"sourceType":"script"}